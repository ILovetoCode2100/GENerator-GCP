#!/bin/bash

# Generated by ULTRATHINK Commit Strategist Agent
# This script commits all changes in logical groups

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}Starting systematic commit process...${NC}"
echo ""

# Function to commit with message
commit_group() {
    local message="$1"
    shift
    local files=("$@")
    
    echo -e "${YELLOW}Committing: ${message}${NC}"
    
    # Check if files exist and add them
    for file in "${files[@]}"; do
        if [ -e "$file" ]; then
            git add "$file"
        fi
    done
    
    # Only commit if there are staged changes
    if ! git diff --cached --quiet; then
        git commit -m "$message"
        echo -e "${GREEN}✓ Committed successfully${NC}"
    else
        echo -e "${YELLOW}⚠ No changes to commit${NC}"
    fi
    echo ""
}

# Group 1: Core Infrastructure Updates
commit_group "chore: update dependencies and configuration" \
    "go.mod" \
    "go.sum" \
    "config/virtuoso-config.yaml" \
    "pkg/virtuoso/client.go"

# Group 2: Modernize Existing Commands
commit_group "refactor: modernize existing step creation commands" \
    "src/cmd/create-step-assert-greater-than-or-equal.go" \
    "src/cmd/create-step-assert-greater-than.go" \
    "src/cmd/create-step-assert-matches.go" \
    "src/cmd/create-step-assert-not-equals.go" \
    "src/cmd/create-step-click.go" \
    "src/cmd/create-step-comment.go" \
    "src/cmd/create-step-key.go" \
    "src/cmd/create-step-navigate.go" \
    "src/cmd/create-step-switch-iframe.go" \
    "src/cmd/create-step-switch-next-tab.go" \
    "src/cmd/create-step-switch-parent-frame.go" \
    "src/cmd/create-step-switch-prev-tab.go" \
    "src/cmd/create-step-write.go" \
    "src/cmd/main.go"

# Group 3: Add Cookie Management Commands
commit_group "feat: add cookie management commands" \
    "src/cmd/create-step-cookie-create.go" \
    "src/cmd/create-step-cookie-wipe-all.go"

# Group 4: Add Enhanced Mouse Commands
commit_group "feat: add enhanced mouse movement commands" \
    "src/cmd/create-step-mouse-move-by.go" \
    "src/cmd/create-step-mouse-move-to.go"

# Group 5: Add Script Execution Commands
commit_group "feat: add script execution and prompt handling commands" \
    "src/cmd/create-step-execute-script.go" \
    "src/cmd/create-step-dismiss-prompt-with-text.go"

# Group 6: Add Enhanced Pick/Select Commands
commit_group "feat: add enhanced pick/select commands" \
    "src/cmd/create-step-pick-index.go" \
    "src/cmd/create-step-pick-last.go"

# Group 7: Add Wait and Store Commands
commit_group "feat: add enhanced wait and store commands" \
    "src/cmd/create-step-wait-for-element-default.go" \
    "src/cmd/create-step-wait-for-element-timeout.go" \
    "src/cmd/create-step-store-element-text.go" \
    "src/cmd/create-step-store-literal-value.go"

# Group 8: Add Scroll and Window Commands
commit_group "feat: add scroll and window resize commands" \
    "src/cmd/create-step-scroll.go" \
    "src/cmd/create-step-window-resize.go"

# Group 9: Add Upload Command
commit_group "feat: add URL upload command" \
    "src/cmd/create-step-upload-url.go"

# Group 10: Documentation Updates
commit_group "docs: add implementation reports and AI context" \
    "CLAUDE.md" \
    "BUILD_AND_TEST_REPORT.md" \
    "COMPREHENSIVE_TEST_RESULTS.md" \
    "IMPLEMENTATION_SUMMARY.md" \
    "MERGE_COMPLETE.md" \
    "MERGE_PLAN.md" \
    "NEW_COMMANDS_SUMMARY.md" \
    "ULTRATHINK_MISSION_COMPLETE.md"

# Group 11: Test Infrastructure
commit_group "test: add comprehensive test scripts and fixtures" \
    "test-all-commands-variations.sh" \
    "test-all-commands.sh" \
    "test-all-fixed.sh" \
    "test-build.sh" \
    "test-cookie-commands.sh" \
    "test-file.txt" \
    "test-fixed-commands.sh" \
    "test-merged-version.sh" \
    "test-new-commands.sh" \
    "test-runtime-failures.sh"

# Group 12: Build and Integration Scripts
commit_group "build: add build and integration scripts" \
    "adapt-version-b-commands.sh" \
    "add-all-steps-fixed.sh" \
    "add-all-steps-to-checkpoint.sh" \
    "add-missing-braces.sh" \
    "add-steps-json-format.sh" \
    "build-and-test.sh" \
    "build-merged-version.sh" \
    "final-syntax-fix.sh" \
    "fix-all-double-braces.sh" \
    "fix-all-syntax.sh" \
    "fix-client-calls.sh" \
    "fix-double-braces.sh" \
    "fix-imports.sh" \
    "fix-package-declarations.sh" \
    "fix-response-handling.sh" \
    "fix-syntax-errors.sh" \
    "fix-undefined-types.sh" \
    "integrate-client-methods.sh" \
    "integrate-commands.sh" \
    "rocketshop-purchase-flow-fixed.sh" \
    "rocketshop-purchase-flow.sh" \
    "simple-syntax-fix.sh" \
    "ultrathink-final-validation.sh"

# Group 13: Add directories and remaining files
commit_group "chore: add project directories and auxiliary files" \
    "hex-virtuoso-api-cli-generator/" \
    "merge-helpers/"

# Group 14: Backup files (if we want to keep them)
echo -e "${YELLOW}Checking for backup files...${NC}"
BACKUP_FILES=$(find src/cmd -name "*.backup" -type f)
if [ ! -z "$BACKUP_FILES" ]; then
    echo -e "${BLUE}Found backup files. Adding them...${NC}"
    commit_group "chore: add backup files from refactoring" \
        $BACKUP_FILES
fi

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}✅ All commits completed successfully!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Final status check
echo -e "${BLUE}Final repository status:${NC}"
git status --short

# Check if working tree is clean
if [ -z "$(git status --porcelain)" ]; then
    echo -e "${GREEN}✓ Working tree is clean!${NC}"
else
    echo -e "${YELLOW}⚠ Warning: Some files may still be uncommitted${NC}"
    echo -e "${YELLOW}  Run 'git status' to review${NC}"
fi
