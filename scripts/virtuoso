#!/bin/bash

# Virtuoso CLI Docker Wrapper Script
# This script simplifies running the Virtuoso CLI in a Docker container

set -e

# Configuration
DOCKER_IMAGE="virtuoso-cli:latest"
CONTAINER_NAME="virtuoso-cli-runner"
CONFIG_DIR="$HOME/.virtuoso"
WORKSPACE_DIR="$(pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker and try again."
        exit 1
    fi
}

# Function to check if image exists
check_image() {
    if ! docker image inspect "$DOCKER_IMAGE" >/dev/null 2>&1; then
        print_warn "Docker image '$DOCKER_IMAGE' not found. Building..."
        docker build -t "$DOCKER_IMAGE" .
    fi
}

# Function to clean up any existing container
cleanup_container() {
    if docker ps -a --format "table {{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
        print_info "Cleaning up existing container..."
        docker rm -f "$CONTAINER_NAME" >/dev/null 2>&1
    fi
}

# Function to setup config directory
setup_config() {
    if [ ! -d "$CONFIG_DIR" ]; then
        print_info "Creating config directory at $CONFIG_DIR"
        mkdir -p "$CONFIG_DIR"
    fi
}

# Function to run the CLI command
run_cli() {
    check_docker
    check_image
    cleanup_container
    setup_config
    
    print_info "Running: virtuoso-cli $*"
    
    # Run the container with the command
    docker run --rm \
        --name "$CONTAINER_NAME" \
        -v "$WORKSPACE_DIR":/workspace \
        -v "$CONFIG_DIR":/home/apiuser/.virtuoso \
        -v "$(dirname "$WORKSPACE_DIR")/config":/config \
        -e VIRTUOSO_API_TOKEN \
        -e VIRTUOSO_BASE_URL \
        -e VIRTUOSO_ORG_ID \
        -e VIRTUOSO_CONFIG_PATH=/config \
        -e VIRTUOSO_OUTPUT_FORMAT \
        "$DOCKER_IMAGE" \
        "$@"
}

# Function to show help
show_help() {
    cat << EOF
Virtuoso CLI Docker Wrapper

Usage: $0 [OPTIONS] [COMMAND]

This script runs the Virtuoso CLI in a Docker container with proper volume mounts
and environment variable forwarding.

Environment Variables:
  VIRTUOSO_API_TOKEN    - API token for authentication
  VIRTUOSO_BASE_URL     - Base URL for Virtuoso API
  VIRTUOSO_ORG_ID       - Organization ID
  VIRTUOSO_OUTPUT_FORMAT - Output format (human, json, yaml, ai)

Examples:
  $0 --help                           # Show CLI help
  $0 --version                        # Show version
  $0 create-project "Test Project"    # Create a new project
  $0 list-projects                    # List all projects
  $0 validate-config                  # Validate configuration

Special Commands:
  $0 --wrapper-help                   # Show this help
  $0 --build                          # Rebuild the Docker image
  $0 --shell                          # Open interactive shell in container

EOF
}

# Function to build the image
build_image() {
    print_info "Building Docker image..."
    docker build -t "$DOCKER_IMAGE" .
    print_info "Image built successfully"
}

# Function to open interactive shell
open_shell() {
    check_docker
    check_image
    cleanup_container
    setup_config
    
    print_info "Opening interactive shell in container..."
    
    docker run -it --rm \
        --name "$CONTAINER_NAME" \
        -v "$WORKSPACE_DIR":/workspace \
        -v "$CONFIG_DIR":/home/apiuser/.virtuoso \
        -v "$(dirname "$WORKSPACE_DIR")/config":/config \
        -e VIRTUOSO_API_TOKEN \
        -e VIRTUOSO_BASE_URL \
        -e VIRTUOSO_ORG_ID \
        -e VIRTUOSO_CONFIG_PATH=/config \
        -e VIRTUOSO_OUTPUT_FORMAT \
        --entrypoint /bin/sh \
        "$DOCKER_IMAGE"
}

# Main script logic
case "$1" in
    --wrapper-help)
        show_help
        ;;
    --build)
        build_image
        ;;
    --shell)
        open_shell
        ;;
    *)
        # Pass all arguments to the CLI
        run_cli "$@"
        ;;
esac