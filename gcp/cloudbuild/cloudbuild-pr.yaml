# Cloud Build configuration for Pull Request builds
# This configuration runs tests and deploys to a preview environment

timeout: 1800s

options:
  machineType: 'E2_HIGHCPU_4'
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'virtuoso-api-cli'
  _ARTIFACT_REGISTRY: 'virtuoso-artifacts'
  _GO_VERSION: '1.21'
  _PR_NUMBER: '${_PR_NUMBER}'

steps:
  # Step 1: Restore Go module cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'restore-go-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m cp -r gs://${PROJECT_ID}-build-cache/go-mod-cache/* /go/pkg/mod/ || exit 0
    volumes:
      - name: 'go-modules'
        path: '/go/pkg/mod'

  # Step 2: Validate code formatting
  - name: 'golang:${_GO_VERSION}'
    id: 'validate-format'
    args:
      - 'bash'
      - '-c'
      - |
        gofmt -l -s . > fmt-diff.txt
        if [ -s fmt-diff.txt ]; then
          echo "The following files need formatting:"
          cat fmt-diff.txt
          exit 1
        fi

  # Step 3: Run linters
  - name: 'golangci/golangci-lint:latest'
    id: 'lint'
    args:
      - 'golangci-lint'
      - 'run'
      - '--timeout=10m'
      - '--config=.golangci.yml'

  # Step 4: Security scanning
  - name: 'securego/gosec:latest'
    id: 'security-scan'
    args:
      - '-fmt=json'
      - '-out=gosec-report.json'
      - './...'

  # Step 5: Build CLI binary
  - name: 'golang:${_GO_VERSION}'
    id: 'build-cli'
    env:
      - 'CGO_ENABLED=0'
      - 'GOOS=linux'
      - 'GOARCH=amd64'
    args:
      - 'go'
      - 'build'
      - '-ldflags=-X main.version=pr-${_PR_NUMBER}-${SHORT_SHA}'
      - '-o'
      - 'bin/api-cli'
      - './cmd/api-cli'
    volumes:
      - name: 'go-modules'
        path: '/go/pkg/mod'

  # Step 6: Run unit tests with coverage
  - name: 'golang:${_GO_VERSION}'
    id: 'unit-tests'
    env:
      - 'GO111MODULE=on'
    args:
      - 'bash'
      - '-c'
      - |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70% threshold"
          exit 1
        fi
    volumes:
      - name: 'go-modules'
        path: '/go/pkg/mod'

  # Step 7: Run integration tests
  - name: 'golang:${_GO_VERSION}'
    id: 'integration-tests'
    env:
      - 'INTEGRATION_TEST=true'
      - 'TEST_ENV=preview'
    args:
      - 'bash'
      - './gcp/cloudbuild/scripts/test.sh'
    volumes:
      - name: 'go-modules'
        path: '/go/pkg/mod'

  # Step 8: Build Docker image for preview
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-docker-preview'
    args:
      - 'build'
      - '--cache-from'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE_NAME}:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE_NAME}:pr-${_PR_NUMBER}'
      - '-f'
      - 'Dockerfile'
      - '.'

  # Step 9: Push preview image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-docker-preview'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE_NAME}:pr-${_PR_NUMBER}'

  # Step 10: Deploy to preview environment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-preview'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_SERVICE_NAME}-pr-${_PR_NUMBER} \
          --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE_NAME}:pr-${_PR_NUMBER} \
          --region ${_REGION} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "VERSION=pr-${_PR_NUMBER}-${SHORT_SHA}" \
          --set-env-vars "ENVIRONMENT=preview" \
          --max-instances 10 \
          --memory 256Mi \
          --cpu 1 \
          --timeout 300 \
          --service-account ${_SERVICE_NAME}-preview@${PROJECT_ID}.iam.gserviceaccount.com \
          --no-traffic

        # Get the preview URL
        PREVIEW_URL=$(gcloud run services describe ${_SERVICE_NAME}-pr-${_PR_NUMBER} \
          --region ${_REGION} \
          --format 'value(status.url)')

        echo "Preview URL: ${PREVIEW_URL}" > preview-url.txt

  # Step 11: Run smoke tests on preview
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'smoke-tests-preview'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        PREVIEW_URL=$(cat preview-url.txt)
        export TARGET_URL="${PREVIEW_URL}"
        export ENVIRONMENT="preview"
        ./gcp/cloudbuild/scripts/smoke-test.sh

  # Step 12: Run performance tests
  - name: 'grafana/k6:latest'
    id: 'performance-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        PREVIEW_URL=$(cat preview-url.txt)
        cat > load-test.js << EOF
        import http from 'k6/http';
        import { check } from 'k6';

        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'],
            http_req_failed: ['rate<0.1'],
          },
        };

        export default function() {
          let response = http.get('${PREVIEW_URL}/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF

        k6 run --out json=performance-results.json load-test.js

  # Step 13: Generate test reports
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'generate-reports'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create test summary
        cat > test-summary.md << EOF
        ## PR Build Summary

        **Build ID:** ${BUILD_ID}
        **PR Number:** ${_PR_NUMBER}
        **Commit:** ${SHORT_SHA}

        ### Test Results
        - Unit Tests: âœ… Passed
        - Integration Tests: âœ… Passed
        - Security Scan: âœ… No critical issues
        - Performance Tests: âœ… Within thresholds

        ### Coverage Report
        $(go tool cover -func=coverage.out | tail -1)

        ### Preview Environment
        ðŸ”— [Preview URL]($(cat preview-url.txt))

        ### Artifacts
        - [Coverage Report](https://storage.googleapis.com/${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}/coverage.html)
        - [Performance Results](https://storage.googleapis.com/${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}/performance-results.json)
        EOF

        # Upload artifacts
        gsutil cp coverage.html gs://${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}/
        gsutil cp performance-results.json gs://${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}/
        gsutil cp test-summary.md gs://${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}/

  # Step 14: Comment on PR (if using GitHub integration)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'comment-pr'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # This would integrate with GitHub API to post the test summary
        # For now, we'll just output it
        echo "=== PR Comment ==="
        cat test-summary.md

  # Step 15: Update Go module cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'save-go-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m rsync -r /go/pkg/mod/ gs://${PROJECT_ID}-build-cache/go-mod-cache/
    volumes:
      - name: 'go-modules'
        path: '/go/pkg/mod'

# Artifacts for PR builds
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-pr-artifacts/${_PR_NUMBER}'
    paths:
      - 'coverage.out'
      - 'coverage.html'
      - 'gosec-report.json'
      - 'performance-results.json'
      - 'test-summary.md'
      - 'preview-url.txt'
