# Cloud Build Configuration Template
# This file will be customized by the deployment wizard

# Substitution variables (passed from trigger or command line)
substitutions:
  _SERVICE_NAME: virtuoso-api-cli
  _REGION: us-central1
  _VIRTUOSO_API_TOKEN: virtuoso-api-token  # Secret name

options:
  # Use a higher-spec machine for faster builds
  machineType: 'E2_HIGHCPU_8'

  # Store logs in Cloud Logging
  logging: CLOUD_LOGGING_ONLY

  # Allow substitution in all fields
  substitution_option: 'ALLOW_LOOSE'

  # Use kaniko for better layer caching
  env:
    - 'DOCKER_BUILDKIT=1'

# Build timeout
timeout: '1200s'  # 20 minutes

steps:
  # Step 1: Build the container image using Docker
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
      - '-f'
      - 'Dockerfile'
      - '.'

  # Step 2: Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}'
    waitFor: ['build-image']

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloud-run'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=512Mi'
      - '--cpu=1'
      - '--min-instances=0'
      - '--max-instances=100'
      - '--concurrency=80'
      - '--timeout=300'
      - '--set-env-vars=DEPLOYMENT_REVISION=$SHORT_SHA'
      - '--set-env-vars=BUILD_TIME=$BUILD_ID'
      - '--set-secrets=VIRTUOSO_API_TOKEN=${_VIRTUOSO_API_TOKEN}:latest'
    waitFor: ['push-image']

  # Step 4: Run smoke tests
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'smoke-test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')

        echo "Testing service at: $SERVICE_URL"

        # Test health endpoint
        curl -f "$SERVICE_URL/health" || exit 1

        # Test API version endpoint
        curl -f "$SERVICE_URL/api/version" || exit 1

        echo "Smoke tests passed!"
    waitFor: ['deploy-cloud-run']

  # Step 5: Update traffic allocation (optional - for canary deployments)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if this is a production deployment
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Updating traffic to latest revision..."
          gcloud run services update-traffic ${_SERVICE_NAME} \
            --region=${_REGION} \
            --to-latest
        else
          echo "Non-production branch, skipping traffic update"
        fi
    waitFor: ['smoke-test']

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}_cloudbuild/logs'
    paths:
      - '/workspace/deployment-report.txt'
