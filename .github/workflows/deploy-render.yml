name: Deploy to Render

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  VIRTUOSO_API_TOKEN: ${{ secrets.VIRTUOSO_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Render CLI
        run: |
          npm install -g @render-oss/cli

      - name: Generate API Keys
        id: generate-keys
        run: |
          API_KEY_1=$(openssl rand -hex 32)
          API_KEY_2=$(openssl rand -hex 32)
          API_KEY_3=$(openssl rand -hex 32)
          echo "::add-mask::$API_KEY_1"
          echo "::add-mask::$API_KEY_2"
          echo "::add-mask::$API_KEY_3"
          echo "api_keys=[\"$API_KEY_1\",\"$API_KEY_2\",\"$API_KEY_3\"]" >> $GITHUB_OUTPUT

          # Save to artifact for reference
          echo "Generated API Keys (save these!):" > api-keys.txt
          echo "Client 1: $API_KEY_1" >> api-keys.txt
          echo "Client 2: $API_KEY_2" >> api-keys.txt
          echo "Client 3: $API_KEY_3" >> api-keys.txt

      - name: Upload API Keys
        uses: actions/upload-artifact@v3
        with:
          name: api-keys-${{ github.run_id }}
          path: api-keys.txt
          retention-days: 7

      - name: Deploy to Render
        env:
          API_KEYS: ${{ steps.generate-keys.outputs.api_keys }}
        run: |
          # Create environment file
          cat > .env.render << EOF
          VIRTUOSO_API_TOKEN=${{ secrets.VIRTUOSO_API_TOKEN }}
          API_KEYS=$API_KEYS
          VIRTUOSO_ORG_ID=${{ secrets.VIRTUOSO_ORG_ID || '2242' }}
          LOG_LEVEL=${{ inputs.environment == 'production' && 'INFO' || 'DEBUG' }}
          RATE_LIMIT_PER_MINUTE=60
          CORS_ALLOWED_ORIGINS=*
          ENVIRONMENT=${{ inputs.environment || 'production' }}
          EOF

          # Deploy using Render CLI
          render deploy \
            --service-name virtuoso-api-${{ inputs.environment || 'production' }} \
            --env-file .env.render

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

      - name: Health Check
        run: |
          SERVICE_URL=$(render services get virtuoso-api-${{ inputs.environment || 'production' }} --json | jq -r '.url')
          echo "Service URL: $SERVICE_URL"

          # Check health endpoint
          for i in {1..10}; do
            if curl -f "$SERVICE_URL/health"; then
              echo "âœ… Service is healthy!"
              break
            else
              echo "Waiting for service to be ready... ($i/10)"
              sleep 30
            fi
          done

      - name: Run Tests
        run: |
          SERVICE_URL=$(render services get virtuoso-api-${{ inputs.environment || 'production' }} --json | jq -r '.url')
          API_KEY=$(echo '${{ steps.generate-keys.outputs.api_keys }}' | jq -r '.[0]')

          # Test API endpoints
          echo "Testing API endpoints..."

          # Test health
          curl -f "$SERVICE_URL/health?detailed=true" | jq .

          # Test commands list
          curl -f -H "X-API-Key: $API_KEY" "$SERVICE_URL/api/v1/commands" | jq .

          echo "âœ… All tests passed!"

      - name: Update Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ inputs.environment || 'production' }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';

            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 1,
              state: status === 'success' ? 'success' : 'failure',
              target_url: runUrl,
              environment: environment,
              description: `Deployment ${status}`
            });
