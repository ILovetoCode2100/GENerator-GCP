# Default values for virtuoso-api-cli.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global parameters
global:
  ## Global image registry
  imageRegistry: ""
  ## Global image pull secrets
  imagePullSecrets: []
  ## Global storage class
  storageClass: ""

## Image configuration
image:
  ## Repository
  repository: virtuoso-api-cli
  ## Image pull policy
  pullPolicy: IfNotPresent
  ## Image tag (defaults to chart appVersion)
  tag: ""

## Image pull secrets
imagePullSecrets: []

## Service account configuration
serviceAccount:
  ## Create service account
  create: true
  ## Annotations for service account
  annotations: {}
  ## Service account name (defaults to fullname)
  name: ""

## Deployment configuration
replicaCount: 3

## Update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

## Pod annotations
podAnnotations: {}

## Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

## Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

## Service configuration
service:
  ## Service type
  type: ClusterIP
  ## Service port
  port: 80
  ## Target port
  targetPort: 8000
  ## Node port (if type is NodePort)
  nodePort: ""
  ## Additional annotations
  annotations: {}

## Ingress configuration
ingress:
  ## Enable ingress
  enabled: false
  ## Ingress class name
  className: "nginx"
  ## Annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  ## Hosts
  hosts:
    - host: api-cli.virtuoso.qa
      paths:
        - path: /
          pathType: Prefix
  ## TLS configuration
  tls: []
  #  - secretName: virtuoso-api-cli-tls
  #    hosts:
  #      - api-cli.virtuoso.qa

## Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

## Autoscaling configuration
autoscaling:
  ## Enable HPA
  enabled: false
  ## Min replicas
  minReplicas: 3
  ## Max replicas
  maxReplicas: 10
  ## Target CPU utilization
  targetCPUUtilizationPercentage: 70
  ## Target memory utilization
  targetMemoryUtilizationPercentage: 80
  ## Custom metrics
  metrics: []
  # - type: Pods
  #   pods:
  #     metric:
  #       name: http_requests_per_second
  #     target:
  #       type: AverageValue
  #       averageValue: "1000"

## Pod disruption budget
podDisruptionBudget:
  ## Enable PDB
  enabled: true
  ## Min available pods
  minAvailable: 1
  ## Max unavailable pods
  maxUnavailable: ""

## Node selector
nodeSelector: {}

## Tolerations
tolerations: []

## Affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - virtuoso-api-cli
        topologyKey: kubernetes.io/hostname

## Liveness probe
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

## Readiness probe
readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

## Startup probe
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

## Volume mounts
volumeMounts:
  - name: config
    mountPath: /home/virtuoso/.api-cli
    readOnly: true
  - name: tmp
    mountPath: /tmp

## Volumes
volumes:
  - name: config
    configMap:
      name: "{{ include \"virtuoso-api-cli.fullname\" . }}-config"
  - name: tmp
    emptyDir: {}

## Application configuration
config:
  ## API Configuration
  api:
    baseUrl: "https://api-app2.virtuoso.qa/api"
    timeout: "30s"
    maxRetries: 3

  ## Organization (set via environment-specific values)
  organization:
    id: ""

  ## Redis Configuration
  redis:
    host: "{{ include \"virtuoso-api-cli.fullname\" . }}-redis-master"
    port: 6379
    db: 0
    poolSize: 10
    maxRetries: 3

  ## Logging Configuration
  logging:
    level: "info"
    format: "json"
    timestamp: true
    caller: false

  ## Server Configuration
  server:
    port: 8000
    readTimeout: "30s"
    writeTimeout: "30s"
    idleTimeout: "120s"
    maxHeaderBytes: 1048576

  ## Rate Limiting
  rateLimit:
    enabled: true
    requestsPerMinute: 60
    burst: 10

  ## CORS Configuration
  cors:
    allowedOrigins: "*"
    allowedMethods: "GET,POST,PUT,DELETE,OPTIONS"
    allowedHeaders: "Authorization,Content-Type"
    maxAge: 86400

  ## Health Check Configuration
  healthCheck:
    interval: "30s"
    timeout: "5s"

  ## Metrics Configuration
  metrics:
    enabled: true
    path: "/metrics"

  ## Feature Flags
  features:
    sessionManagement: true
    asyncExecution: true
    webhookNotifications: false

## Secret configuration
secret:
  ## Create secret (if false, must exist)
  create: true
  ## Secret name (defaults to fullname-secret)
  name: ""
  ## API Token (required if create is true)
  apiToken: ""
  ## Additional secret data
  data: {}

## External secrets configuration
externalSecrets:
  ## Enable external secrets
  enabled: false
  ## Secret store ref
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  ## Refresh interval
  refreshInterval: 15s
  ## Data from external secret
  data:
    - secretKey: api-token
      remoteRef:
        key: virtuoso/api-cli
        property: token

## Redis subchart configuration
redis:
  ## Enable Redis
  enabled: true
  ## Redis architecture
  architecture: standalone
  ## Auth settings
  auth:
    enabled: true
    password: "changeme"
  ## Master configuration
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        memory: 256Mi
        cpu: 250m
      requests:
        memory: 128Mi
        cpu: 100m
  ## Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

## Service Monitor configuration
serviceMonitor:
  ## Enable service monitor
  enabled: false
  ## Interval
  interval: 30s
  ## Scrape timeout
  scrapeTimeout: 10s
  ## Additional labels
  labels: {}
  ## Additional annotations
  annotations: {}

## Extra environment variables
extraEnvVars: []
# - name: EXTRA_VAR
#   value: "extra-value"

## Extra environment variables from secrets/configmaps
extraEnvFrom: []
# - configMapRef:
#     name: extra-configmap
# - secretRef:
#     name: extra-secret

## Extra containers
extraContainers: []

## Extra init containers
extraInitContainers: []

## Extra volumes
extraVolumes: []

## Extra volume mounts
extraVolumeMounts: []

## Priority class name
priorityClassName: ""

## Runtime class name
runtimeClassName: ""

## Host aliases
hostAliases: []

## DNS policy
dnsPolicy: ClusterFirst

## DNS config
dnsConfig: {}

## Termination grace period
terminationGracePeriodSeconds: 30

## Topology spread constraints
topologySpreadConstraints: []

## Lifecycle hooks
lifecycle: {}

## Container port
containerPort: 8000

## Host network
hostNetwork: false

## Share process namespace
shareProcessNamespace: false

## Network Policy configuration
networkPolicy:
  ## Enable network policy
  enabled: false
  ## Ingress configuration
  ingress:
    ## Namespace selector for ingress controller
    namespaceSelector:
      name: ingress-nginx
    ## Custom ingress rules
    custom: []
  ## Egress configuration
  egress:
    ## Custom egress rules
    custom: []
  ## Metrics configuration
  metrics:
    ## Namespace selector for Prometheus
    namespaceSelector:
      name: monitoring

## Health check CronJob configuration
healthCheckCronJob:
  ## Enable health check cronjob
  enabled: false
  ## Cron schedule
  schedule: "*/15 * * * *"
  ## History limits
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

## Prometheus Rule configuration
prometheusRule:
  ## Enable Prometheus rules
  enabled: false
  ## Additional labels
  labels: {}
  ## Additional rules
  additionalRules: []

## Vertical Pod Autoscaler configuration
verticalPodAutoscaler:
  ## Enable VPA
  enabled: false
  ## Update mode (Off, Initial, Recreate, Auto)
  updateMode: Auto
  ## Controlled resources
  controlledResources: ["cpu", "memory"]
  ## Max allowed resources
  maxAllowed:
    cpu: 2
    memory: 4Gi
  ## Min allowed resources
  minAllowed:
    cpu: 100m
    memory: 128Mi
