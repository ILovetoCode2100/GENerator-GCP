{{- if .Values.healthCheckCronJob.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "virtuoso-api-cli.fullname" . }}-healthcheck
  labels:
    {{- include "virtuoso-api-cli.labels" . | nindent 4 }}
    app.kubernetes.io/component: healthcheck
spec:
  schedule: {{ .Values.healthCheckCronJob.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: {{ .Values.healthCheckCronJob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.healthCheckCronJob.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "virtuoso-api-cli.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: healthcheck
        spec:
          {{- include "virtuoso-api-cli.imagePullSecrets" . | nindent 10 }}
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: healthcheck
            image: curlimages/curl:latest
            imagePullPolicy: IfNotPresent
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Running health check..."

              # Check main service health
              if curl -f http://{{ include "virtuoso-api-cli.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}/health; then
                echo "Service is healthy"
              else
                echo "Service health check failed"
                exit 1
              fi

              # Check Redis connectivity if enabled
              {{- if .Values.redis.enabled }}
              echo "Checking Redis connectivity..."
              if nc -zv {{ include "virtuoso-api-cli.redisHost" . }} {{ include "virtuoso-api-cli.redisPort" . }}; then
                echo "Redis is reachable"
              else
                echo "Redis connectivity check failed"
                exit 1
              fi
              {{- end }}

              echo "All health checks passed"
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 50m
                memory: 64Mi
{{- end }}
