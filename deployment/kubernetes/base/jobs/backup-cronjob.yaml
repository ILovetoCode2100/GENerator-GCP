apiVersion: v1
kind: ServiceAccount
metadata:
  name: virtuoso-backup
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: virtuoso-backup
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec"]
  verbs: ["get", "list", "create"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: virtuoso-backup
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: virtuoso-backup
subjects:
- kind: ServiceAccount
  name: virtuoso-backup
  namespace: virtuoso-api
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: virtuoso-backup-storage
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: virtuoso-backup
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: virtuoso-api-cli
        component: backup
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app: virtuoso-api-cli
            component: backup
        spec:
          serviceAccountName: virtuoso-backup
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: virtuoso-backup-storage
          - name: backup-script
            configMap:
              name: backup-script
              defaultMode: 0755
          containers:
          - name: backup
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/scripts/backup.sh"]
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: backup-script
              mountPath: /scripts
            env:
            - name: REDIS_HOST
              value: "virtuoso-redis"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: virtuoso-api-secret
                  key: REDIS_PASSWORD
            - name: BACKUP_RETENTION_DAYS
              value: "30"
            - name: NOTIFICATION_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: virtuoso-api-secret
                  key: SLACK_WEBHOOK_URL
                  optional: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: backup
data:
  backup.sh: |
    #!/bin/sh
    set -e

    # Install required tools
    apk add --no-cache redis curl tar gzip jq

    # Variables
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_NAME="virtuoso-backup-${TIMESTAMP}"
    BACKUP_PATH="${BACKUP_DIR}/${BACKUP_NAME}"

    # Create backup directory
    mkdir -p "${BACKUP_PATH}"

    # Function to send notification
    notify() {
        local status=$1
        local message=$2
        if [ -n "${NOTIFICATION_WEBHOOK_URL}" ]; then
            curl -X POST "${NOTIFICATION_WEBHOOK_URL}" \
                -H 'Content-Type: application/json' \
                -d "{\"text\":\"Virtuoso Backup ${status}: ${message}\"}" || true
        fi
    }

    # Backup Redis
    echo "Starting Redis backup..."
    redis-cli -h "${REDIS_HOST}" -p "${REDIS_PORT}" -a "${REDIS_PASSWORD}" \
        --rdb "${BACKUP_PATH}/redis-dump.rdb" || {
        notify "FAILED" "Redis backup failed"
        exit 1
    }

    # Backup ConfigMaps
    echo "Backing up ConfigMaps..."
    kubectl get configmaps -n virtuoso-api -o json > "${BACKUP_PATH}/configmaps.json"

    # Backup Secrets (encrypted)
    echo "Backing up Secrets..."
    kubectl get secrets -n virtuoso-api -o json | \
        jq 'del(.items[].metadata.resourceVersion, .items[].metadata.uid)' > "${BACKUP_PATH}/secrets.json"

    # Create metadata file
    cat > "${BACKUP_PATH}/metadata.json" <<EOF
    {
      "timestamp": "${TIMESTAMP}",
      "backup_name": "${BACKUP_NAME}",
      "namespace": "virtuoso-api",
      "components": ["redis", "configmaps", "secrets"]
    }
    EOF

    # Compress backup
    echo "Compressing backup..."
    cd "${BACKUP_DIR}"
    tar -czf "${BACKUP_NAME}.tar.gz" "${BACKUP_NAME}"
    rm -rf "${BACKUP_NAME}"

    # Clean up old backups
    echo "Cleaning up old backups..."
    find "${BACKUP_DIR}" -name "virtuoso-backup-*.tar.gz" -mtime +${BACKUP_RETENTION_DAYS} -delete

    # Upload to object storage (if configured)
    if [ -n "${S3_BUCKET}" ]; then
        echo "Uploading to S3..."
        aws s3 cp "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" \
            "s3://${S3_BUCKET}/backups/${BACKUP_NAME}.tar.gz" || {
            notify "WARNING" "S3 upload failed, backup stored locally"
        }
    fi

    # Success notification
    BACKUP_SIZE=$(du -h "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" | cut -f1)
    notify "SUCCESS" "Backup completed successfully. Size: ${BACKUP_SIZE}"

    echo "Backup completed successfully!"
