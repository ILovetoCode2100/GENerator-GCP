apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: virtuoso-api-cli
  namespace: virtuoso-api
  labels:
    app: virtuoso-api-cli
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: virtuoso-api-cli
  minReplicas: 5
  maxReplicas: 20
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics (requires metrics server)
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  # Scale based on external metrics (e.g., queue depth)
  - type: External
    external:
      metric:
        name: redis_queue_depth
        selector:
          matchLabels:
            queue: virtuoso-jobs
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 10  # Scale down by 10% max
        periodSeconds: 60
      - type: Pods
        value: 2   # Remove max 2 pods
        periodSeconds: 60
      selectPolicy: Min  # Use the most conservative policy
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      policies:
      - type: Percent
        value: 50  # Scale up by 50% max
        periodSeconds: 60
      - type: Pods
        value: 5   # Add max 5 pods
        periodSeconds: 60
      selectPolicy: Max  # Use the most aggressive policy
---
# HPA for Redis (if using Redis cluster)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: virtuoso-redis
  namespace: virtuoso-api
  labels:
    app: virtuoso-redis
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: virtuoso-redis
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 minutes for Redis
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300  # Scale down slowly
