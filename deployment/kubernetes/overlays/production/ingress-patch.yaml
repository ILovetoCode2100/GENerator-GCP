apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: virtuoso-api-cli
  annotations:
    # Production TLS with Let's Encrypt
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "dns01"
    cert-manager.io/acme-dns01-provider: "cloudflare"

    # Strict rate limiting
    nginx.ingress.kubernetes.io/limit-connections: "10"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/limit-rpm: "600"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "2"
    nginx.ingress.kubernetes.io/limit-whitelist: "10.0.0.0/8"  # Internal only

    # Production CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.virtuoso.qa"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization,Content-Type,X-Request-ID,X-API-Key"
    nginx.ingress.kubernetes.io/cors-expose-headers: "X-Request-ID,X-RateLimit-Limit,X-RateLimit-Remaining"
    nginx.ingress.kubernetes.io/cors-max-age: "43200"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "false"

    # Strict security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin";
      more_set_headers "Content-Security-Policy: default-src 'none'; frame-ancestors 'none';";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "X-Environment: production";

      # Remove server header
      more_clear_headers "Server";
      more_clear_headers "X-Powered-By";

    # Production timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"

    # Force HTTPS
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"

    # Security scanning and WAF
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecResponseBodyAccess Off
      SecRequestBodyLimit 10485760
      SecRequestBodyNoFilesLimit 131072
      SecAuditEngine RelevantOnly
      SecAuditLog /var/log/modsec_audit.log
      SecAuditLogParts ABDEFHIJZ
      SecDefaultAction "phase:2,pass,log,tag:OWASP_CRS"

    # Additional production security
    nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"  # Configure as needed
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.virtuoso.qa
    - api-v2.virtuoso.qa
    secretName: virtuoso-api-tls
  rules:
  - host: api.virtuoso.qa
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: virtuoso-api-cli
            port:
              number: 8000
  - host: api-v2.virtuoso.qa
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: virtuoso-api-cli
            port:
              number: 8000
