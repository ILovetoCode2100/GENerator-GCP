openapi: 3.0.3
info:
  title: Virtuoso Test Converter API
  description: |
    Convert test scripts from Selenium, Cypress, and Playwright to Virtuoso format.

    ## Features
    - Multi-format test conversion
    - Pattern-based transformation
    - Batch processing
    - Real-time execution
    - Learning from feedback

    ## Authentication
    All API requests require an API key in the `X-API-Key` header.
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@virtuoso.qa
    url: https://docs.virtuoso.qa
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.virtuoso.qa/v1
    description: Production server
  - url: https://api-staging.virtuoso.qa/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development

security:
  - ApiKeyAuth: []

tags:
  - name: Convert
    description: Test conversion endpoints
  - name: Status
    description: Job status and monitoring
  - name: Patterns
    description: Conversion patterns and learning
  - name: Feedback
    description: Feedback and improvements
  - name: Tests
    description: Test execution and management
  - name: Sessions
    description: Session management
  - name: Health
    description: System health checks

paths:
  /convert:
    post:
      tags:
        - Convert
      summary: Convert a single test
      description: Convert a test from source format to Virtuoso format
      operationId: convertTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertRequest'
            examples:
              seleniumPython:
                summary: Selenium Python Example
                value:
                  source_format: selenium-python
                  test_content: |
                    driver.get("https://example.com")
                    driver.find_element(By.ID, "login").click()
                  target_format: virtuoso-yaml
              cypress:
                summary: Cypress Example
                value:
                  source_format: cypress
                  test_content: |
                    cy.visit('https://example.com')
                    cy.get('#login').click()
      responses:
        '200':
          description: Successful conversion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /convert/batch:
    post:
      tags:
        - Convert
      summary: Convert multiple tests
      description: Batch convert multiple tests in a single request
      operationId: convertBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchConvertRequest'
      responses:
        '202':
          description: Batch conversion accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchConvertResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /status/{jobId}:
    get:
      tags:
        - Status
      summary: Get job status
      description: Check the status of a conversion or execution job
      operationId: getJobStatus
      parameters:
        - name: jobId
          in: path
          required: true
          description: Job ID
          schema:
            type: string
            example: job_123456
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /patterns:
    get:
      tags:
        - Patterns
      summary: List conversion patterns
      description: Get all available conversion patterns with filters
      operationId: listPatterns
      parameters:
        - name: source_framework
          in: query
          description: Filter by source framework
          schema:
            type: string
            enum: [selenium, cypress, playwright]
        - name: category
          in: query
          description: Filter by pattern category
          schema:
            type: string
            enum: [navigation, interaction, assertion, data]
        - name: confidence_min
          in: query
          description: Minimum confidence score
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: List of patterns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternList'

  /patterns/{patternId}:
    get:
      tags:
        - Patterns
      summary: Get pattern details
      description: Get detailed information about a specific pattern
      operationId: getPattern
      parameters:
        - name: patternId
          in: path
          required: true
          description: Pattern ID
          schema:
            type: string
            example: NAV-001
      responses:
        '200':
          description: Pattern details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pattern'
        '404':
          $ref: '#/components/responses/NotFound'

  /feedback:
    post:
      tags:
        - Feedback
      summary: Submit conversion feedback
      description: Submit feedback to improve conversion accuracy
      operationId: submitFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      responses:
        '201':
          description: Feedback submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackResponse'

  /tests/run:
    post:
      tags:
        - Tests
      summary: Run a test
      description: Execute a test in Virtuoso format
      operationId: runTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunTestRequest'
      responses:
        '202':
          description: Test execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunTestResponse'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Basic health check endpoint
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

  schemas:
    ConvertRequest:
      type: object
      required:
        - source_format
        - test_content
      properties:
        source_format:
          type: string
          description: Source test framework format
          enum:
            - selenium-java
            - selenium-python
            - selenium-javascript
            - selenium-csharp
            - cypress
            - playwright
        test_content:
          type: string
          description: Test code to convert
        target_format:
          type: string
          description: Target format (defaults to virtuoso-yaml)
          enum:
            - virtuoso-yaml
            - virtuoso-json
          default: virtuoso-yaml
        options:
          type: object
          properties:
            preserve_comments:
              type: boolean
              default: true
            generate_descriptions:
              type: boolean
              default: true
            confidence_threshold:
              type: number
              minimum: 0
              maximum: 1
              default: 0.7

    ConvertResponse:
      type: object
      properties:
        job_id:
          type: string
          example: job_123456
        status:
          type: string
          enum: [completed, failed]
        result:
          type: object
          properties:
            converted_test:
              type: object
              description: Converted test in target format
            confidence_score:
              type: number
              minimum: 0
              maximum: 1
            conversion_notes:
              type: array
              items:
                type: string
            warnings:
              type: array
              items:
                type: string

    BatchConvertRequest:
      type: object
      required:
        - tests
      properties:
        tests:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              content:
                type: string
              source_format:
                type: string
        options:
          $ref: '#/components/schemas/ConvertRequest/properties/options'

    BatchConvertResponse:
      type: object
      properties:
        batch_id:
          type: string
        status:
          type: string
          enum: [queued, processing]
        webhook_url:
          type: string
        estimated_duration:
          type: string

    JobStatus:
      type: object
      properties:
        job_id:
          type: string
        type:
          type: string
          enum: [conversion, execution]
        status:
          type: string
          enum: [queued, processing, completed, failed]
        progress:
          type: number
          minimum: 0
          maximum: 100
        result:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Pattern:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        source:
          type: object
          properties:
            framework:
              type: string
            commands:
              type: array
              items:
                type: object
        target:
          type: object
          properties:
            command:
              type: string
            syntax:
              type: string
        confidence:
          type: number
        examples:
          type: array
          items:
            type: object
        alternatives:
          type: array
          items:
            type: object

    PatternList:
      type: object
      properties:
        patterns:
          type: array
          items:
            $ref: '#/components/schemas/Pattern'
        pagination:
          $ref: '#/components/schemas/Pagination'

    FeedbackRequest:
      type: object
      required:
        - conversion_id
        - rating
      properties:
        conversion_id:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comments:
          type: string
        correct_conversion:
          type: string

    FeedbackResponse:
      type: object
      properties:
        feedback_id:
          type: string
        status:
          type: string
        message:
          type: string

    RunTestRequest:
      type: object
      required:
        - test_definition
      properties:
        test_definition:
          type: object
        execute:
          type: boolean
          default: true
        dry_run:
          type: boolean
          default: false

    RunTestResponse:
      type: object
      properties:
        test_id:
          type: string
        execution_id:
          type: string
        status:
          type: string
        webhook_url:
          type: string

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        request_id:
          type: string
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
        X-RateLimit-Remaining:
          schema:
            type: integer
        X-RateLimit-Reset:
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
