name: "YAML Validation and Parsing Tests"
description: "Test YAML parsing, validation errors, and structure requirements"

# This file contains multiple test sections separated by comments
# Each section tests different aspects of YAML parsing and validation

# ========== VALID MINIMAL STRUCTURE ==========
# Test 1: Absolute minimum valid structure
---
name: "Minimal Valid Test"
steps:
  - navigate: "https://example.com"
---

# ========== MISSING REQUIRED FIELDS ==========
# Test 2: Missing name field (should fail)
---
steps:
  - navigate: "https://example.com"
---

# Test 3: Missing steps field (should fail)
---
name: "No Steps Test"
description: "This test has no steps array"
---

# Test 4: Empty steps array (should fail or warn)
---
name: "Empty Steps Test"
steps: []
---

# ========== INVALID STEP STRUCTURES ==========
# Test 5: Step with no command (should fail)
---
name: "Invalid Step Structure"
steps:
  - # Empty step
  - selector: "button"  # Missing command
---

# Test 6: Multiple commands in one step (should fail)
---
name: "Multiple Commands Test"
steps:
  - navigate: "https://example.com"
    click: "button"  # Can't have two commands
---

# ========== DATA TYPE VALIDATION ==========
# Test 7: Invalid data types
---
name: "Invalid Data Types"
steps:
  # String where number expected
  - wait: "not-a-number"

  # Number where string expected
  - navigate: 12345

  # Boolean where string expected
  - click: true

  # Array where string expected
  - comment: ["not", "a", "string"]
---

# ========== STRUCTURE VALIDATION ==========
# Test 8: Deeply nested invalid structure
---
name: "Nested Structure Test"
steps:
  - write:
      selector:
        nested:
          too:
            deep: "input#test"
      text: "test"
---

# Test 9: Invalid variable syntax
---
name: "Variable Syntax Test"
variables:
  - name: "invalid name with spaces"
    value: "test"
  - name: "123startWithNumber"
    value: "test"
  - name: "special@chars"
    value: "test"
steps:
  - assert:
      type: "variable"
      variable: "$${double-dollar}"
      value: "test"
---

# ========== INFRASTRUCTURE VALIDATION ==========
# Test 10: Invalid infrastructure configuration
---
name: "Infrastructure Validation"
infrastructure:
  organization_id: ""  # Empty org ID
  project: 123  # Should be object or string
  starting_url: "not-a-url"
steps:
  - navigate: "https://example.com"
---

# Test 11: Conflicting infrastructure settings
---
name: "Conflicting Settings"
project: "Project Name"
infrastructure:
  project:
    name: "Different Project"
    description: "Conflicting project definition"
steps:
  - navigate: "https://example.com"
---

# ========== SPECIAL CHARACTERS AND ESCAPING ==========
# Test 12: Special characters that need escaping
---
name: "Special Characters Test: With Colon"
description: "Description with \"quotes\" and 'apostrophes'"
steps:
  - comment: "Line 1\nLine 2"  # Newline
  - comment: "Tab\there"       # Tab
  - comment: "Quote: \"test\"" # Escaped quotes
  - write:
      selector: "input"
      text: |
        Multi-line
        text with special chars: & < > " '
        and preserving formatting
---

# ========== YAML ANCHORS AND REFERENCES ==========
# Test 13: Using YAML anchors (should be handled correctly)
---
name: "YAML Anchors Test"
defaults: &defaults
  timeout: 5000
  continue_on_error: true

config:
  <<: *defaults

common_selector: &button "button.submit"

steps:
  - click: *button
  - assert: *button
---

# ========== NUMERIC EDGE CASES ==========
# Test 14: Various numeric formats
---
name: "Numeric Formats Test"
steps:
  - wait: 1000      # Integer
  - wait: 1_000     # Integer with separator
  - wait: 1.5e3     # Scientific notation
  - wait: 0x3E8     # Hexadecimal
  - wait: 0o1750    # Octal
  - assert:
      type: "gt"
      selector: "span"
      value: "-0"   # Negative zero
  - assert:
      type: "lt"
      selector: "span"
      value: ".5"   # Leading decimal
---

# ========== BOOLEAN VARIATIONS ==========
# Test 15: Different boolean representations
---
name: "Boolean Variations Test"
config:
  continue_on_error: true
  continue_on_error: True
  continue_on_error: TRUE
  continue_on_error: yes
  continue_on_error: Yes
  continue_on_error: YES
  continue_on_error: on
  continue_on_error: On
  continue_on_error: ON
steps:
  - window:
      action: "switch"
      parent: true
      parent: false
      parent: False
      parent: FALSE
      parent: no
      parent: No
      parent: NO
      parent: off
      parent: Off
      parent: OFF
---

# ========== NULL VALUES ==========
# Test 16: Null value handling
---
name: "Null Values Test"
description: null
variables:
  - name: "nullVar"
    value: ~
  - name: "nullVar2"
    value: null
  - name: "nullVar3"
    value: Null
  - name: "nullVar4"
    value: NULL
steps:
  - comment: ~
---

# ========== MALFORMED YAML ==========
# Test 17: Indentation errors
---
name: "Indentation Error Test"
steps:
  - navigate: "https://example.com"
   - click: "button"  # Wrong indentation
---

# Test 18: Unclosed quotes
---
name: "Unclosed Quote Test
steps:
  - comment: "This quote is not closed
---

# Test 19: Invalid YAML syntax
---
name: "Invalid Syntax Test"
steps:
  - navigate: "https://example.com"
  - click: button"  # Missing opening quote
  - assert: [unclosed array
---

# ========== CIRCULAR REFERENCES ==========
# Test 20: Circular reference (if supported)
---
name: "Circular Reference Test"
step_template: &template
  click: "button"
  next: *template  # Circular reference
steps:
  - <<: *template
---

# ========== VERY LARGE STRUCTURES ==========
# Test 21: Extremely long array
---
name: "Large Array Test"
steps:
  - navigate: "https://example.com"
  # ... imagine 1000+ steps here
  - comment: "Step 1"
  - comment: "Step 2"
  - comment: "Step 3"
  # Testing parser's ability to handle large files
---

# ========== UNICODE AND ENCODING ==========
# Test 22: Unicode and special encodings
---
name: "Unicode Test 🎭"
description: "Testing émojis 🚀 and spëcial çharacters ñ"
steps:
  - comment: "Hello 世界"
  - comment: "Привет мир"
  - comment: "مرحبا بالعالم"
  - comment: "🎯🎨🎭🎪🎬"
  - write:
      selector: "input"
      text: "Ñiño José München Москва 北京"
---

# ========== MIXED VALID AND INVALID ==========
# Test 23: Partially valid structure
---
name: "Mixed Valid/Invalid Test"
steps:
  - navigate: "https://example.com"  # Valid
  - click: "button"                  # Valid
  - invalid_command: "test"          # Invalid
  - assert: "h1"                     # Valid
  - write:                          # Invalid (missing required fields)
      text: "test"
  - wait: 1000                      # Valid
---

# ========== CONFIG VALIDATION ==========
# Test 24: Invalid config values
---
name: "Config Validation Test"
config:
  continue_on_error: "maybe"  # Should be boolean
  timeout: "five seconds"     # Should be number
  unknown_option: true        # Unknown config option
steps:
  - navigate: "https://example.com"
---

# ========== END OF VALIDATION TESTS ==========
# Note: This file intentionally contains invalid YAML sections
# to test error handling. A robust parser should handle each
# section appropriately and provide meaningful error messages.
