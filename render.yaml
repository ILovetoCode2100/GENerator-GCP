services:
  # FastAPI Web Service
  - type: web
    name: virtuoso-api
    runtime: docker
    dockerfilePath: ./Dockerfile.render
    dockerContext: .
    envVars:
      # API Configuration
      - key: API_HOST
        value: 0.0.0.0
      - key: API_PORT
        value: 8000
      - key: API_WORKERS
        value: 4
      - key: API_ENV
        value: production
      - key: LOG_LEVEL
        value: INFO

      # Redis Configuration (internal connection)
      - key: REDIS_URL
        fromService:
          type: redis
          name: virtuoso-redis
          property: connectionString

      # CLI Configuration
      - key: CLI_BINARY_PATH
        value: /app/bin/api-cli
      - key: VIRTUOSO_BASE_URL
        value: https://api-app2.virtuoso.qa/api
      - key: VIRTUOSO_ORG_ID
        value: 2242

      # Security
      - key: JWT_SECRET
        generateValue: true
      - key: ENCRYPTION_KEY
        generateValue: true

      # CORS
      - key: CORS_ALLOWED_ORIGINS
        value: "*"  # Update with your domain

      # Rate Limiting
      - key: RATE_LIMIT_ENABLED
        value: true
      - key: RATE_LIMIT_PER_MINUTE
        value: 60

      # Monitoring
      - key: ENABLE_METRICS
        value: true

      # Virtuoso API Token (set this in Render dashboard)
      - key: VIRTUOSO_API_TOKEN
        sync: false

      # API Keys (set these in Render dashboard)
      - key: API_KEYS
        sync: false

    # Health check
    healthCheckPath: /health

    # Auto-deploy from main branch
    autoDeploy: true

    # Scaling
    scaling:
      minInstances: 1
      maxInstances: 5
      targetMemoryPercent: 80
      targetCPUPercent: 70

    # Build configuration
    buildCommand: |
      # Build Go CLI binary
      cd /app && make build && \
      # Install Python dependencies
      cd /app/api && pip install -r requirements.txt

    # Start command
    startCommand: |
      cd /app/api && \
      gunicorn app.main:app \
        --worker-class uvicorn.workers.UvicornWorker \
        --workers 4 \
        --bind 0.0.0.0:8000 \
        --access-logfile - \
        --error-logfile - \
        --log-level info

  # Redis Private Service
  - type: redis
    name: virtuoso-redis
    ipAllowList: []  # Only accessible from within Render
    maxmemoryPolicy: allkeys-lru
    plan: starter  # Options: starter, standard, pro

  # Background Worker for async tasks (optional)
  - type: worker
    name: virtuoso-worker
    runtime: docker
    dockerfilePath: ./Dockerfile.worker
    dockerContext: .
    envVars:
      # Copy environment from web service
      - key: REDIS_URL
        fromService:
          type: redis
          name: virtuoso-redis
          property: connectionString
      - key: VIRTUOSO_API_TOKEN
        sync: false
      - key: LOG_LEVEL
        value: INFO

    # Worker command
    startCommand: |
      cd /app/api && \
      celery -A app.worker worker --loglevel=info

  # Cron job for cleanup (optional)
  - type: cron
    name: virtuoso-cleanup
    runtime: docker
    dockerfilePath: ./Dockerfile.render
    dockerContext: .
    schedule: "0 3 * * *"  # Daily at 3 AM UTC
    command: |
      cd /app/api && \
      python -m app.scripts.cleanup
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: virtuoso-redis
          property: connectionString

# Database (if needed in future)
databases:
  - name: virtuoso-db
    databaseName: virtuoso
    plan: starter  # Options: starter, standard, pro
    ipAllowList: []  # Only accessible from within Render

# Environment Groups (shared configuration)
envVarGroups:
  - name: virtuoso-shared
    envVars:
      - key: APP_NAME
        value: Virtuoso API CLI
      - key: APP_VERSION
        value: 1.0.0
      - key: ENABLE_DOCS
        value: true
