"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderService = void 0;
const aws_xray_sdk_core_1 = require("aws-xray-sdk-core");
const commons_1 = require("@aws-lambda-powertools/commons");
class ProviderService {
    captureAWS(awssdk) {
        return (0, aws_xray_sdk_core_1.captureAWS)(awssdk);
    }
    captureAWSClient(service) {
        return (0, aws_xray_sdk_core_1.captureAWSClient)(service);
    }
    captureAWSv3Client(service) {
        (0, commons_1.addUserAgentMiddleware)(service, 'tracer');
        // Type must be aliased as any because of this https://github.com/aws/aws-xray-sdk-node/issues/439#issuecomment-859715660
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (0, aws_xray_sdk_core_1.captureAWSv3Client)(service);
    }
    captureAsyncFunc(name, fcn, _parent) {
        return (0, aws_xray_sdk_core_1.captureAsyncFunc)(name, fcn);
    }
    captureFunc(name, fcn, _parent) {
        return (0, aws_xray_sdk_core_1.captureFunc)(name, fcn);
    }
    captureHTTPsGlobal() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        (0, aws_xray_sdk_core_1.captureHTTPsGlobal)(require('http'));
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        (0, aws_xray_sdk_core_1.captureHTTPsGlobal)(require('https'));
    }
    getNamespace() {
        return (0, aws_xray_sdk_core_1.getNamespace)();
    }
    getSegment() {
        return (0, aws_xray_sdk_core_1.getSegment)();
    }
    putAnnotation(key, value) {
        const segment = this.getSegment();
        if (segment === undefined) {
            console.warn('No active segment or subsegment found, skipping annotation');
            return;
        }
        if (segment instanceof aws_xray_sdk_core_1.Segment) {
            console.warn('You cannot annotate the main segment in a Lambda execution environment');
            return;
        }
        segment.addAnnotation(key, value);
    }
    putMetadata(key, value, namespace) {
        const segment = this.getSegment();
        if (segment === undefined) {
            console.warn('No active segment or subsegment found, skipping metadata addition');
            return;
        }
        if (segment instanceof aws_xray_sdk_core_1.Segment) {
            console.warn('You cannot add metadata to the main segment in a Lambda execution environment');
            return;
        }
        segment.addMetadata(key, value, namespace);
    }
    setContextMissingStrategy(strategy) {
        (0, aws_xray_sdk_core_1.setContextMissingStrategy)(strategy);
    }
    setDaemonAddress(address) {
        (0, aws_xray_sdk_core_1.setDaemonAddress)(address);
    }
    setLogger(logObj) {
        (0, aws_xray_sdk_core_1.setLogger)(logObj);
    }
    setSegment(segment) {
        (0, aws_xray_sdk_core_1.setSegment)(segment);
    }
}
exports.ProviderService = ProviderService;
